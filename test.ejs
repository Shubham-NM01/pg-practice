<%- include("./partials/head.ejs") %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="<%- BASE_URL %>js/utils.js"></script>
    <style>
        .signature-pad {
            border: 1px solid #ced4da;
            background-color: white;
        }

        .signature-item {
            position: absolute;
            cursor: move;
            z-index: 100;
            border: 1px dashed #007bff;
        }

        .signature-controls {
            position: absolute;
            top: -25px;
            right: 0;
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid #dee2e6;
            border-radius: 3px;
            display: none;
        }

        .signature-item:hover .signature-controls {
            display: block;
        }

        .signature-resize-handle {
            width: 10px;
            height: 10px;
            background-color: #007bff;
            position: absolute;
            bottom: 0;
            right: 0;
            cursor: se-resize;
        }
    </style>
    </head>

    <body>

        <body class="bg-rose-200">
            <div class="w-full p-4">
                <div class="flex justify-between w-full items-center mb-4">
                    <h6 class="text-xl font-bold">Sign PDF: <%= filename %>
                    </h6>
                    <a href="/" class="bg-gray-500 text-white px-4 py-2 rounded">
                        <i class="fas fa-arrow-left mr-2"></i>Back
                    </a>
                </div>

                <div class="bg-white shadow-lg rounded-lg flex flex-row">
                    <div class="bg-gray-100 p-4 flex gap-2 flex-col items-center">
                        <div class="flex items-center">
                            <span class="mr-2">Page:</span>
                            <select id="pageSelector" class="form-select rounded border p-1">
                                <option value="1">1</option>
                            </select>
                        </div>

                        <div class="flex-1">
                            <canvas id="signatureCanvas" class="signature-pad bg-white w-64 h-32 mx-2"></canvas>
                        </div>

                        <div class="flex gap-2">
                            <button id="clearCanvas" class="bg-gray-500 text-white px-4 py-2 rounded">
                                <i class="fas fa-eraser mr-1"></i>Clear
                            </button>
                            <button id="addSignature" class="bg-blue-500 text-white px-4 py-2 rounded">
                                <i class="fas fa-plus mr-1"></i>Stamp Signature
                            </button>
                            <button id="addImageSignature" class="bg-blue-500 text-white px-4 py-2 rounded">
                                <i class="fas fa-image mr-1"></i>Upload Signature
                            </button>
                            <input type="file" id="signatureImage" accept="image/*" class="hidden">
                        </div>

                        <button id="saveSignedPdf" class="bg-green-500 text-white px-6 py-2 rounded">
                            <i class="fas fa-save mr-1"></i>Save PDF
                        </button>
                    </div>

                    <div class="p-4">
                        <div id="pdfContainer"
                            class="min-h-[600px] h-full bg-gray-50 rounded-lg overflow-hidden border"></div>
                    </div>
                </div>
            </div>

            <!-- <h2>Sign the PDF</h2>
            <div id="pdf-container" style="position:relative;">
                <embed src="<%= BASE_URL %>file-versions/view-file/<%= file_id %>" width="600px" height="800px"
                    type="application/pdf" />
            </div>

            <input type="file" id="signature-file" name="signatureFile" onchange="uploadSignature(event)">
            <button onclick="saveSignature()">Save & Download</button> -->

            <script>
                // Configuring PDF Js
                pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';

                $(document).ready(function () {
                    let pdfDoc = null;
                    let signatureCounter = 0;
                    let signatures = [];

                    const canvas = document.getElementById('signatureCanvas');
                    const ctx = canvas.getContext('2d');
                    let isDrawing = false;
                    let lastX = 0;
                    let lastY = 0;

                    canvas.width = 320; // 2x w-64
                    canvas.height = 128; // 2x h-32

                    ctx.lineWidth = 2;
                    ctx.lineCap = 'round';
                    ctx.strokeStyle = '#000';

                    canvas.addEventListener('mousedown', startDrawing);
                    canvas.addEventListener('mousemove', draw);
                    canvas.addEventListener('mouseup', stopDrawing);
                    canvas.addEventListener('mouseout', stopDrawing);

                    // Touch events for signature drawing
                    canvas.addEventListener('touchstart', startDrawingTouch);
                    canvas.addEventListener('touchmove', drawTouch);
                    canvas.addEventListener('touchend', stopDrawing);

                    function startDrawing(e) {
                        isDrawing = true;
                        [lastX, lastY] = [e.offsetX, e.offsetY];
                    }

                    function startDrawingTouch(e) {
                        e.preventDefault();
                        isDrawing = true;
                        const rect = canvas.getBoundingClientRect();
                        const touch = e.touches[0];
                        [lastX, lastY] = [touch.clientX - rect.left, touch.clientY - rect.top];
                    }

                    function draw(e) {
                        if (!isDrawing) return;
                        ctx.beginPath();
                        ctx.moveTo(lastX, lastY);
                        ctx.lineTo(e.offsetX, e.offsetY);
                        ctx.stroke();
                        [lastX, lastY] = [e.offsetX, e.offsetY];
                    }

                    function drawTouch(e) {
                        if (!isDrawing) return;
                        e.preventDefault();
                        const rect = canvas.getBoundingClientRect();
                        const touch = e.touches[0];
                        const x = touch.clientX - rect.left;
                        const y = touch.clientY - rect.top;

                        ctx.beginPath();
                        ctx.moveTo(lastX, lastY);
                        ctx.lineTo(x, y);
                        ctx.stroke();
                        [lastX, lastY] = [x, y];
                    }

                    function stopDrawing() {
                        isDrawing = false;
                    }

                    $('#clearCanvas').click(() => {
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                    });

                    $('#addImageSignature').click(() => {
                        $('#signatureImage').click();
                    });

                    $('#signatureImage').change(function (e) {
                        if (e.target.files && e.target.files[0]) {
                            const reader = new FileReader();
                            reader.onload = function (event) {
                                const img = new Image();
                                img.onload = function () {
                                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                                    const ratio = img.width / img.height;
                                    let newWidth = canvas.width;
                                    let newHeight = newWidth / ratio;
                                    if (newHeight > canvas.height) {
                                        newHeight = canvas.height;
                                        newWidth = newHeight * ratio;
                                    }
                                    const xOffset = (canvas.width - newWidth) / 2;
                                    const yOffset = (canvas.height - newHeight) / 2;
                                    ctx.drawImage(img, xOffset, yOffset, newWidth, newHeight);
                                };
                                img.src = event.target.result;
                            };
                            reader.readAsDataURL(e.target.files[0]);
                        }
                    });

                    async function loadPdfForSigning(pdfUrl) {
                        try {
                            const loadingTask = pdfjsLib.getDocument(pdfUrl);
                            pdfDoc = await loadingTask.promise;

                            // Update page selector
                            const pageSelector = $('#pageSelector');
                            pageSelector.empty();
                            for (let i = 1; i <= pdfDoc.numPages; i++) {
                                pageSelector.append(`<option value="${i}">${i}</option>`);
                            }

                            // Load first page
                            await loadPdfPage(1);

                            // Handle page changes
                            pageSelector.change(function () {
                                const pageNumber = parseInt($(this).val());
                                loadPdfPage(pageNumber);
                                $('.signature-item').hide();
                                $('.signature-item[data-page="' + pageNumber + '"]').show();
                            });
                        } catch (error) {
                            console.error('Error loading PDF:', error);
                            alert('Error loading PDF document');
                        }
                    }

                    // Load specific page
                    async function loadPdfPage(pageNumber) {
                        try {
                            if ($('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]').length > 0) {
                                $('#pdfContainer .pdf-page').hide();
                                $('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]').show();
                                return;
                            }

                            const page = await pdfDoc.getPage(pageNumber);
                            const viewport = page.getViewport({ scale: 1.5 });

                            const pageContainer = $('<div class="pdf-page relative bg-white shadow"></div>');
                            pageContainer.attr('data-page', pageNumber);
                            pageContainer.css({
                                width: viewport.width + 'px',
                                height: viewport.height + 'px',
                                margin: '0 auto'
                            });

                            const canvas = document.createElement('canvas');
                            const context = canvas.getContext('2d');
                            canvas.width = viewport.width;
                            canvas.height = viewport.height;

                            const pageNumberDiv = $('<div class="absolute top-2 right-2 bg-white px-2 py-1 rounded shadow">Page ' + pageNumber + '</div>');
                            pageContainer.append(pageNumberDiv);

                            $('#pdfContainer .pdf-page').hide();
                            $('#pdfContainer').append(pageContainer);
                            pageContainer.prepend(canvas);

                            await page.render({
                                canvasContext: context,
                                viewport: viewport
                            }).promise;
                        } catch (error) {
                            console.error('Error rendering page:', error);
                            alert('Error rendering PDF page');
                        }
                    }

                    // Add signature to page
                    $('#addSignature').click(function () {
                        const imageData = canvas.toDataURL('image/png');
                        if (isCanvasBlank(canvas)) {
                            alert('Please draw a signature first');
                            return;
                        }

                        const currentPage = parseInt($('#pageSelector').val());
                        addSignatureToPage(imageData, currentPage);
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                    });

                    function addSignatureToPage(imageData, pageNumber) {
                        const signatureId = 'sig-' + (++signatureCounter);
                        const pageContainer = $('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]');

                        const signatureElement = $('<div class="signature-item"></div>')
                            .attr('id', signatureId)
                            .attr('data-page', pageNumber);

                        const signatureImage = $('<img>')
                            .attr('src', imageData)
                            .css({
                                width: '200px',
                                height: 'auto',
                                display: 'block'
                            });

                        const controls = $('<div class="signature-controls"></div>')
                            .append('<button class="bg-red-500 text-white px-2 py-1 rounded"><i class="fas fa-trash"></i></button>');

                        signatureElement
                            .append(signatureImage)
                            .append(controls)
                            .append('<div class="signature-resize-handle"></div>')
                            .appendTo(pageContainer);

                        const centerX = (pageContainer.width() - 200) / 2;
                        const centerY = (pageContainer.height() - 100) / 2;

                        signatureElement.css({
                            left: centerX + 'px',
                            top: centerY + 'px'
                        });

                        signatureElement.draggable({
                            containment: pageContainer,
                            start: function () {
                                $(this).css('z-index', 100);
                                $('.signature-item').not(this).css('z-index', 10);
                            },
                            stop: updateSignaturePosition
                        }).resizable({
                            handles: { se: '.signature-resize-handle' },
                            stop: updateSignaturePosition
                        });

                        controls.find('button').click(function () {
                            signatureElement.remove();
                            signatures = signatures.filter(sig => sig.id !== signatureId);
                        });

                        signatures.push({
                            id: signatureId,
                            imageData: imageData,
                            pageNumber: pageNumber,
                            x: centerX,
                            y: centerY,
                            width: 200,
                            height: signatureImage.height() || 100
                        });
                    }

                    function updateSignaturePosition() {
                        const element = $(this);
                        const signatureId = element.attr('id');
                        const position = element.position();
                        const width = element.width();
                        const height = element.height();
                        const pageNumber = parseInt(element.data('page'));

                        const index = signatures.findIndex(sig => sig.id === signatureId);
                        if (index !== -1) {
                            signatures[index] = {
                                ...signatures[index],
                                x: position.left,
                                y: position.top,
                                width: width,
                                height: height,
                                pageNumber: pageNumber
                            };
                        }
                    }

                    function isCanvasBlank(canvas) {
                        const context = canvas.getContext('2d');
                        const pixelBuffer = new Uint32Array(
                            context.getImageData(0, 0, canvas.width, canvas.height).data.buffer
                        );
                        return !pixelBuffer.some(color => color !== 0);
                    }

                    // Save signed PDF
                    $('#saveSignedPdf').click(function () {
                        if (signatures.length === 0) {
                            alert('Please add at least one signature to the PDF');
                            return;
                        }

                        const button = $(this);
                        const originalText = button.html();
                        button.html('<i class="fas fa-spinner fa-spin"></i> Saving...').prop('disabled', true);

                        $.ajax({
                            url: window.location.pathname.replace('/sign/', '/sign-pdf/'),
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ signatures }),
                            success: function (response) {
                                if (response.success) {
                                    window.location.href = '/';
                                }
                            },
                            error: function (error) {
                                alert('Error saving signed PDF: ' + (error.responseJSON?.error || 'Unknown error'));
                                button.html(originalText).prop('disabled', false);
                            }
                        });
                    });

                    // Load the PDF on page load
                    loadPdfForSigning('<%= BASE_URL %>file-versions/view-file/<%= file_id %>');
                })
            </script>
        </body>

        </html>

        <!-- <%= BASE_URL %>file-versions/view-file/<%= file_id %> -->