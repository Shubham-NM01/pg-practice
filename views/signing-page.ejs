<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign PDF</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    <style>
        .signature-pad {
            border: 1px solid #ced4da;
            background-color: white;
        }

        .signature-item {
            position: absolute;
            cursor: move;
            z-index: 100;
            border: 1px dashed transparent;
        }

        .signature-controls {
            position: absolute;
            top: -25px;
            right: 0;
            background: rgba(255, 255, 255, 0.9);
            /* border: 1px solid #dee2e6; */
            border-radius: 3px;
            display: none;
        }

        .signature-item:hover {
            border: 1px dashed #007bff;
        }

        .signature-item:hover .signature-controls {
            display: block;
        }

        .signature-resize-handle {
            width: 14px;
            height: 14px;
            background-color: #007bff;
            position: absolute;
            bottom: -7px;
            right: -7px;
            cursor: se-resize;
            border-radius: 50%;
            z-index: 101;
            /* border: 2px solid white; */
        }

        .signature-item[data-type="comment"] img {
            max-width: 300px;
        }

        /* .signature-item[data-type="comment"] {
            background: rgba(255, 255, 255, 0.9);
            padding: 2px;
            border-radius: 3px;
        } */
        .comment-text {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 3px;
            white-space: pre-wrap;
            word-break: break-word;
            cursor: move;
        }

        .signature-item[data-type="comment"] {
            background: transparent;
        }
    </style>
</head>

<body class="bg-gray-100">
    <div class="p-4">
        <div class="flex justify-between items-center mb-4">
            <h1 class="text-3xl font-bold">Sign PDF: <%= pdfName %>
            </h1>
            <a href="/" class="bg-gray-500 text-white px-4 py-2 rounded">
                <i class="fas fa-arrow-left mr-2"></i>Back
            </a>
        </div>

        <div class="bg-white shadow-lg rounded-lg flex">
            <div class="bg-gray-100 p-4 flex gap-2 flex-wrap w-96 flex-col items-center">
                <div class="flex items-center">
                    <span class="mr-2">Page:</span>
                    <select id="pageSelector" class="form-select rounded border p-1">
                        <option value="1">1</option>
                    </select>
                </div>

                <div class="">
                    <canvas id="signatureCanvas" class="signature-pad w-64 h-32 mx-2"></canvas>
                </div>

                <div class="flex flex-col items-center w-full gap-2">
                    <button id="clearCanvas" class="w-64 bg-gray-500 text-white px-4 py-2 rounded">
                        <i class="fas fa-eraser mr-1"></i>Clear
                    </button>
                    <button id="addSignature" class="w-64 bg-blue-500 text-white px-4 py-2 rounded">
                        <i class="fas fa-plus mr-1"></i>Add Signature
                    </button>
                    <button id="addImageSignature" class="w-64 bg-blue-500 text-white px-4 py-2 rounded">
                        <i class="fas fa-image mr-1"></i>Upload Image
                    </button>
                    <input type="file" id="signatureImage" accept="image/*" class="w-64 hidden">
                </div>
                <div class="flex flex-col gap-2 items-center">
                    <input type="text" id="commentText" placeholder="Enter comment..."
                        class="border rounded px-3 py-2 w-64">
                    <button id="addComment" class="bg-purple-500 w-64 text-white px-4 py-2 rounded disabled:opacity-50">
                        <i class="fas fa-comment mr-1"></i>Add Comment
                    </button>
                </div>
                <button id="saveSignedPdf" class="bg-green-500 text-white px-6 py-2 w-64 rounded">
                    <i class="fas fa-save mr-1"></i>Save PDF
                </button>
            </div>

            <div class="p-4">
                <div id="pdfContainer" class="min-h-[600px] bg-gray-50 rounded border"></div>
            </div>
        </div>
    </div>

    <!-- jQuery and jQuery UI -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <!-- <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css"> -->
    <script>
        // Configure PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';

        $(document).ready(function () {
            let pdfDoc = null;
            let signatureCounter = 0;
            let commentCounter = 0;
            let signatures = [];

            // Initialize signature canvas once the DOM is ready
            const canvas = document.getElementById('signatureCanvas');
            const ctx = canvas.getContext('2d');
            let isDrawing = false;
            let lastX = 0;
            let lastY = 0;

            // Set canvas size explicitly
            canvas.width = 320;  // Twice the tailwind w-64
            canvas.height = 128; // Twice the tailwind h-32

            // Set up the canvas
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            ctx.strokeStyle = '#000';

            // Mouse events for signature drawing
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);

            // Touch events for signature drawing
            canvas.addEventListener('touchstart', startDrawingTouch);
            canvas.addEventListener('touchmove', drawTouch);
            canvas.addEventListener('touchend', stopDrawing);

            function startDrawing(e) {
                isDrawing = true;
                const rect = canvas.getBoundingClientRect();
                const scaleX = canvas.width / rect.width;
                const scaleY = canvas.height / rect.height;
                [lastX, lastY] = [(e.clientX - rect.left) * scaleX, (e.clientY - rect.top) * scaleY];
            }

            function startDrawingTouch(e) {
                e.preventDefault();
                isDrawing = true;
                const rect = canvas.getBoundingClientRect();
                const touch = e.touches[0];
                [lastX, lastY] = [touch.clientX - rect.left, touch.clientY - rect.top];
            }

            function draw(e) {
                if (!isDrawing) return;
                const rect = canvas.getBoundingClientRect();
                const scaleX = canvas.width / rect.width;
                const scaleY = canvas.height / rect.height;
                const x = (e.clientX - rect.left) * scaleX;
                const y = (e.clientY - rect.top) * scaleY;

                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(x, y);
                ctx.stroke();
                [lastX, lastY] = [x, y];
            }

            function drawTouch(e) {
                if (!isDrawing) return;
                e.preventDefault();
                const rect = canvas.getBoundingClientRect();
                const touch = e.touches[0];
                const x = touch.clientX - rect.left;
                const y = touch.clientY - rect.top;

                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(x, y);
                ctx.stroke();
                [lastX, lastY] = [x, y];
            }

            function stopDrawing() {
                isDrawing = false;
            }


            function createTextImage(text, fontSize = 16) {
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');

                tempCtx.font = `${fontSize}px Arial`;
                const metrics = tempCtx.measureText(text);
                const padding = 10;

                tempCanvas.width = metrics.width + (padding * 2);
                tempCanvas.height = fontSize + (padding * 2);

                tempCtx.font = `${fontSize}px Arial`;
                tempCtx.fillStyle = '#000000';
                tempCtx.textBaseline = 'top';
                tempCtx.fillText(text, padding, padding);

                return tempCanvas.toDataURL('image/png');
            }

            function addCommentToPage(text, pageNumber) {
                const commentId = 'comment-' + (++commentCounter);
                const pageContainer = $('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]');

                const commentElement = $('<div class="signature-item"></div>')
                    .attr('id', commentId)
                    .attr('data-page', pageNumber)
                    .attr('data-type', 'comment');

                const textElement = $('<div class="comment-text"></div>')
                    .text(text)
                    .css({
                        fontSize: '16px',
                        padding: '5px',
                        minWidth: '50px',
                        maxWidth: '300px',
                        minHeight: '20px',
                        display: 'inline-block',
                        whiteSpace: 'pre-wrap',
                        wordBreak: 'break-word'
                    });

                const controls = $('<div class="signature-controls"></div>')
                    .append('<button class="bg-red-500 text-white px-2 py-1 rounded-lg overflow-hidden"><i class="fas fa-trash"></i></button>');

                commentElement
                    .append(textElement)
                    .append(controls)
                    .append('<div class="signature-resize-handle"></div>')
                    .appendTo(pageContainer);

                const centerX = (pageContainer.width() - textElement.width()) / 2;
                const centerY = (pageContainer.height() - textElement.height()) / 2;

                commentElement.css({
                    left: centerX + 'px',
                    top: centerY + 'px'
                });

                commentElement.draggable({
                    containment: pageContainer,
                    start: function () {
                        $(this).css('z-index', 100);
                        $('.signature-item').not(this).css('z-index', 10);
                    },
                    stop: updateSignaturePosition
                }).resizable({
                    handles: { se: '.signature-resize-handle' },
                    containment: pageContainer,
                    stop: function (event, ui) {
                        updateSignaturePosition.call(this);
                        const element = $(this);
                        const signatureId = element.attr('id');
                        const textElement = element.find('.comment-text');
                        const computedStyle = window.getComputedStyle(textElement[0]);
                        const fontSize = parseInt(computedStyle.fontSize);

                        const index = signatures.findIndex(sig => sig.id === signatureId);
                        if (index !== -1 && signatures[index].type === 'comment') {
                            signatures[index].fontSize = fontSize;
                        }
                    },
                    resize: function (event, ui) {
                        const textElement = $(this).find('.comment-text');
                        textElement.css({
                            width: ui.size.width - 10,
                            height: ui.size.height - 10
                        });
                        const scale = Math.min(Math.max(ui.size.width / ui.originalSize.width, 0.7), 1.5);
                        const newFontSize = Math.max(Math.min(16 * scale, 24), 12);
                        textElement.css('fontSize', newFontSize + 'px');
                    }
                });

                controls.find('button').click(function () {
                    commentElement.remove();
                    signatures = signatures.filter(sig => sig.id !== commentId);
                });

                signatures.push({
                    id: commentId,
                    text: text,
                    pageNumber: pageNumber,
                    x: centerX,
                    y: centerY,
                    width: textElement.width(),
                    height: textElement.height(),
                    type: 'comment',
                    fontSize: 16
                });
            }

            // Handle canvas clear
            $('#clearCanvas').click(() => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                $('#signatureImage').val('')
            });

            // Handle image upload
            $('#addImageSignature').click(() => {
                $('#signatureImage').click();
            });

            $('#signatureImage').change(function (e) {
                if (e.target.files && e.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        const img = new Image();
                        img.onload = function () {
                            ctx.clearRect(0, 0, canvas.width, canvas.height);
                            const ratio = img.width / img.height;
                            let newWidth = canvas.width;
                            let newHeight = newWidth / ratio;
                            if (newHeight > canvas.height) {
                                newHeight = canvas.height;
                                newWidth = newHeight * ratio;
                            }
                            const xOffset = (canvas.width - newWidth) / 2;
                            const yOffset = (canvas.height - newHeight) / 2;
                            ctx.drawImage(img, xOffset, yOffset, newWidth, newHeight);
                        };
                        img.src = event.target.result;
                    };
                    reader.readAsDataURL(e.target.files[0]);
                }
            });

            // Load PDF function
            async function loadPdfForSigning(pdfUrl) {
                try {
                    const loadingTask = pdfjsLib.getDocument(pdfUrl);
                    pdfDoc = await loadingTask.promise;

                    // Update page selector
                    const pageSelector = $('#pageSelector');
                    pageSelector.empty();
                    for (let i = 1; i <= pdfDoc.numPages; i++) {
                        pageSelector.append(`<option value="${i}">${i}</option>`);
                    }

                    // Load first page
                    await loadPdfPage(1);

                    // Handle page changes
                    pageSelector.change(function () {
                        const pageNumber = parseInt($(this).val());
                        loadPdfPage(pageNumber);
                        $('.signature-item').hide();
                        $('.signature-item[data-page="' + pageNumber + '"]').show();
                    });
                } catch (error) {
                    console.error('Error loading PDF:', error);
                    alert('Error loading PDF document');
                }
            }

            async function loadPdfPage(pageNumber) {
                try {
                    if ($('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]').length > 0) {
                        $('#pdfContainer .pdf-page').hide();
                        $('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]').show();
                        return;
                    }

                    const page = await pdfDoc.getPage(pageNumber);
                    const viewport = page.getViewport({ scale: 1.5 });

                    const pageContainer = $('<div class="pdf-page relative bg-white shadow"></div>');
                    pageContainer.attr('data-page', pageNumber);
                    pageContainer.css({
                        width: viewport.width + 'px',
                        height: viewport.height + 'px',
                        margin: '0 auto'
                    });

                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = viewport.width;
                    canvas.height = viewport.height;

                    const pageNumberDiv = $('<div class="absolute top-2 right-2 bg-white px-2 py-1 rounded shadow">Page ' + pageNumber + '</div>');
                    pageContainer.append(pageNumberDiv);

                    $('#pdfContainer .pdf-page').hide();
                    $('#pdfContainer').append(pageContainer);
                    pageContainer.prepend(canvas);

                    await page.render({
                        canvasContext: context,
                        viewport: viewport
                    }).promise;
                } catch (error) {
                    console.error('Error rendering page:', error);
                    alert('Error rendering PDF page');
                }
            }

            $('#addSignature').click(function () {
                const imageData = canvas.toDataURL('image/png');
                if (isCanvasBlank(canvas)) {
                    alert('Please draw a signature first');
                    return;
                }

                const currentPage = parseInt($('#pageSelector').val());
                addSignatureToPage(imageData, currentPage);
                // ctx.clearRect(0, 0, canvas.width, canvas.height);
            });

            function addSignatureToPage(imageData, pageNumber) {
                const signatureId = 'sig-' + (++signatureCounter);
                const pageContainer = $('#pdfContainer .pdf-page[data-page="' + pageNumber + '"]');

                const signatureElement = $('<div class="signature-item"></div>')
                    .attr('id', signatureId)
                    .attr('data-page', pageNumber);

                const signatureImage = $('<img>')
                    .attr('src', imageData)
                    .css({
                        width: '100%',
                        height: '100%',
                        display: 'block'
                    });

                const controls = $('<div class="signature-controls"></div>')
                    .append('<button class="bg-red-500 text-white px-2 py-1 rounded-lg overflow-hidden"><i class="fas fa-trash"></i></button>');

                signatureElement
                    .append(signatureImage)
                    .append(controls)
                    .append('<div class="signature-resize-handle"></div>')
                    .appendTo(pageContainer);

                const centerX = (pageContainer.width() - 200) / 2;
                const centerY = (pageContainer.height() - 100) / 2;

                signatureElement.css({
                    left: centerX + 'px',
                    top: centerY + 'px'
                });

                signatureElement.resizable({
                    handles: { se: '.signature-resize-handle' },
                    containment: pageContainer,
                    stop: updateSignaturePosition,
                    resize: function (event, ui) {
                        const img = $(this).find('img');
                        img.css({
                            width: '100%',
                            height: '100%'
                        });
                        if (ui.size.width < 50 || ui.size.height < 25) {
                            return false;
                        }
                    }
                }).draggable({
                    containment: pageContainer,
                    start: function () {
                        $(this).css('z-index', 100);
                        $('.signature-item').not(this).css('z-index', 10);
                    },
                    stop: updateSignaturePosition
                })

                controls.find('button').click(function () {
                    signatureElement.remove();
                    signatures = signatures.filter(sig => sig.id !== signatureId);
                });

                signatures.push({
                    id: signatureId,
                    imageData: imageData,
                    pageNumber: pageNumber,
                    x: centerX,
                    y: centerY,
                    width: 200,
                    height: signatureImage.height() || 100
                });
            }

            function updateSignaturePosition() {
                const element = $(this);
                const signatureId = element.attr('id');
                const position = element.position();
                const width = element.width();
                const height = element.height();
                const pageNumber = parseInt(element.data('page'));

                const index = signatures.findIndex(sig => sig.id === signatureId);
                if (index !== -1) {
                    signatures[index] = {
                        ...signatures[index],
                        x: position.left,
                        y: position.top,
                        width: width,
                        height: height,
                        pageNumber: pageNumber
                    };
                }
            }

            function isCanvasBlank(canvas) {
                const context = canvas.getContext('2d');
                const pixelBuffer = new Uint32Array(
                    context.getImageData(0, 0, canvas.width, canvas.height).data.buffer
                );
                return !pixelBuffer.some(color => color !== 0);
            }

            $('#saveSignedPdf').click(async function () {
                if (signatures.length === 0) {
                    alert('Please add at least one signature to the PDF');
                    return;
                }

                const button = $(this);
                const originalText = button.html();
                button.html('<i class="fas fa-spinner fa-spin"></i> Saving...').prop('disabled', true);


                $.ajax({
                    url: window.location.pathname.replace('/sign/', '/sign-pdf/'),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ signatures: signatures }),
                    success: function (response) {
                        if (response.success) {
                            window.location.href = '/';
                        }
                    },
                    error: function (error) {
                        alert('Error saving signed PDF: ' + (error.responseJSON?.error || 'Unknown error'));
                        button.html(originalText).prop('disabled', false);
                    }
                });
            });

            loadPdfForSigning('/uploads/<%= pdfFilename %>');

            $('#commentText').on('input', function () {
                $('#addComment').prop('disabled', !this.value.trim());
            });

            $('#addComment').prop('disabled', true).click(function () {
                const commentText = $('#commentText').val().trim();
                if (!commentText) return;

                const currentPage = parseInt($('#pageSelector').val());
                addCommentToPage(commentText, currentPage);

                $('#commentText').val('').trigger('input');
            });
        });

    </script>
</body>

</html>